global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: 'production-monitoring'
    environment: 'production'
    replica: 'prometheus-1'

rule_files:
  - "/etc/prometheus/rules/*.yml"

alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 5s
    metrics_path: /metrics

  # Node Exporter - System metrics from all servers
  - job_name: 'node-exporter'
    static_configs:
      # Web Application Servers
      - targets: 
          - 'web01.yourdomain.com:9100'
          - 'web02.yourdomain.com:9100'
        labels:
          environment: 'production'
          role: 'web-application'
          monitoring_type: 'docker+system'
      
      # Database Servers
      - targets:
          - 'db01.yourdomain.com:9100'
          - 'db02.yourdomain.com:9100'
        labels:
          environment: 'production'
          role: 'database'
          monitoring_type: 'system'
      
      # Kubernetes Nodes
      - targets:
          - 'k8s-master.yourdomain.com:9100'
          - 'k8s-worker-01.yourdomain.com:9100'
          - 'k8s-worker-02.yourdomain.com:9100'
        labels:
          environment: 'production'
          role: 'kubernetes'
          monitoring_type: 'kubernetes+system'
      
      # Load Balancers
      - targets:
          - 'lb01.yourdomain.com:9100'
        labels:
          environment: 'production'
          role: 'load-balancer'
          monitoring_type: 'system'
      
      # Development Servers
      - targets:
          - 'dev01.yourdomain.com:9100'
        labels:
          environment: 'development'
          role: 'development'
          monitoring_type: 'docker+system'
      
      # Staging Servers
      - targets:
          - 'staging01.yourdomain.com:9100'
        labels:
          environment: 'staging'
          role: 'staging'
          monitoring_type: 'docker+system'
    
    scrape_interval: 15s
    metrics_path: /metrics

  # cAdvisor - Container metrics from Docker-enabled servers
  - job_name: 'cadvisor'
    static_configs:
      # Web Application Servers with Docker
      - targets:
          - 'web01.yourdomain.com:8080'
          - 'web02.yourdomain.com:8080'
        labels:
          environment: 'production'
          role: 'web-application'
          monitoring_type: 'docker+system'
      
      # Kubernetes Nodes
      - targets:
          - 'k8s-master.yourdomain.com:8080'
          - 'k8s-worker-01.yourdomain.com:8080'
          - 'k8s-worker-02.yourdomain.com:8080'
        labels:
          environment: 'production'
          role: 'kubernetes'
          monitoring_type: 'kubernetes+system'
      
      # Development Servers
      - targets:
          - 'dev01.yourdomain.com:8080'
        labels:
          environment: 'development'
          role: 'development'
          monitoring_type: 'docker+system'
      
      # Staging Servers
      - targets:
          - 'staging01.yourdomain.com:8080'
        labels:
          environment: 'staging'
          role: 'staging'
          monitoring_type: 'docker+system'
    
    scrape_interval: 15s
    metrics_path: /metrics

  # Kubernetes API server
  - job_name: 'kubernetes-apiservers'
    kubernetes_sd_configs:
    - role: endpoints
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
    - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
      action: keep
      regex: default;kubernetes;https

  # Kubernetes nodes
  - job_name: 'kubernetes-nodes'
    kubernetes_sd_configs:
    - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    - target_label: __address__
      replacement: kubernetes.default.svc:443
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/${1}/proxy/metrics

  # Kubernetes cAdvisor
  - job_name: 'kubernetes-cadvisor'
    kubernetes_sd_configs:
    - role: node
    scheme: https
    tls_config:
      ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
    relabel_configs:
    - action: labelmap
      regex: __meta_kubernetes_node_label_(.+)
    - target_label: __address__
      replacement: kubernetes.default.svc:443
    - source_labels: [__meta_kubernetes_node_name]
      regex: (.+)
      target_label: __metrics_path__
      replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

  # Kubernetes services
  - job_name: 'kubernetes-service-endpoints'
    kubernetes_sd_configs:
    - role: endpoints
    relabel_configs:
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
      action: keep
      regex: true
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
      action: replace
      target_label: __scheme__
      regex: (https?)
    - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
      action: replace
      target_label: __metrics_path__
      regex: (.+)
    - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
      action: replace
      regex: ([^:]+)(?::\d+)?;(\d+)
      replacement: $1:$2
      target_label: __address__
    - action: labelmap
      regex: __meta_kubernetes_service_label_(.+)
    - source_labels: [__meta_kubernetes_namespace]
      action: replace
      target_label: kubernetes_namespace
    - source_labels: [__meta_kubernetes_service_name]
      action: replace
      target_label: kubernetes_name

  # Grafana metrics
  - job_name: 'grafana'
    static_configs:
      - targets: ['grafana:3000']
    scrape_interval: 30s
    metrics_path: /metrics

  # Alertmanager metrics
  - job_name: 'alertmanager'
    static_configs:
      - targets: ['alertmanager:9093']
    scrape_interval: 30s
    metrics_path: /metrics

  # Blackbox exporter for service health checks
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]
    static_configs:
      # Health checks for web applications
      - targets:
          - http://web01.yourdomain.com/health
          - http://web02.yourdomain.com/health
        labels:
          environment: 'production'
          role: 'web-application'
          check_type: 'http'
      
      # Health checks for databases
      - targets:
          - tcp://db01.yourdomain.com:3306
          - tcp://db02.yourdomain.com:3306
        labels:
          environment: 'production'
          role: 'database'
          check_type: 'tcp'
      
      # Health checks for load balancers
      - targets:
          - http://lb01.yourdomain.com/health
        labels:
          environment: 'production'
          role: 'load-balancer'
          check_type: 'http'
      
      # Health checks for monitoring services
      - targets:
          - http://monitoring.yourdomain.com:3000/api/health
          - http://monitoring.yourdomain.com:9090/-/healthy
          - http://monitoring.yourdomain.com:9093/-/healthy
        labels:
          environment: 'production'
          role: 'monitoring'
          check_type: 'http'
    
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  # Custom application metrics (if your applications expose Prometheus metrics)
  - job_name: 'application-metrics'
    static_configs:
      # Web application custom metrics
      - targets:
          - 'web01.yourdomain.com:8080'
          - 'web02.yourdomain.com:8080'
        labels:
          environment: 'production'
          role: 'web-application'
          metrics_type: 'application'
    
    scrape_interval: 30s
    metrics_path: /metrics

  # Service discovery for Docker containers (if using Docker Swarm or similar)
  - job_name: 'docker-containers'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["prometheus.io/scrape=true"]
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        target_label: container_name
      - source_labels: [__meta_docker_container_label_prometheus_io_scrape]
        target_label: __tmp_prometheus_scrape
        regex: true
      - source_labels: [__meta_docker_container_label_prometheus_io_path]
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_docker_container_label_prometheus_io_port]
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: keep
        source_labels: [__tmp_prometheus_scrape]
        regex: true
      - source_labels: [__meta_docker_container_label_prometheus_io_scheme]
        target_label: __scheme__
        regex: (https?)
